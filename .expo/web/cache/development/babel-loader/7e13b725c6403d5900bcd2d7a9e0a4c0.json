{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\winston\\\\Documents\\\\react-native-boilerplate-master\\\\node_modules\\\\react-native-d3multiline-chart\\\\multipleLineChart.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Svg, { Circle, Line, G, Path, Text, Rect } from 'react-native-svg';\nimport * as d3 from 'd3';\nimport * as scale from 'd3-scale';\nimport _ from 'lodash';\nimport createLegend from \"./utils/createLegend\";\nimport NativePath from \"./AnimatedSVG\";\nimport NativeCircle from \"./AnimatedSVGCircle\";\nimport { svgPathProperties } from 'svg-path-properties';\nimport { calculateOverallLineChartData, buildColorArray } from \"./utils/dataCalculation\";\nimport { dummyData, leftAxisData, bottomAxisData } from \"./dummyData\";\nvar linePathOne, linePathSecond, xCoordinate, yCoordinate, pointsOnLine, circleInFirstLine, circleInSecondLine, legend;\nvar WIDTH = 380,\n    HEIGHT = 380,\n    MARGINS = {\n  top: 20,\n  right: 20,\n  bottom: 20,\n  left: 30\n};\n\nfunction createLineProps(path) {\n  var properties = svgPathProperties(path);\n  var length = properties.getTotalLength();\n  console.log('the length', length);\n  return {\n    d: path,\n    strokeDashoffset: new Animated.Value(length),\n    strokeDasharray: [length, length]\n  };\n}\n\nvar MulipleLineChart = function (_Component) {\n  _inherits(MulipleLineChart, _Component);\n\n  var _super = _createSuper(MulipleLineChart);\n\n  function MulipleLineChart(props) {\n    _classCallCheck(this, MulipleLineChart);\n\n    return _super.call(this, props);\n  }\n\n  _createClass(MulipleLineChart, [{\n    key: \"animate\",\n    value: function animate() {\n      var _this = this;\n\n      var _this$props = this.props,\n          delay = _this$props.delay,\n          duration = _this$props.duration,\n          staggerLength = _this$props.staggerLength,\n          speed = _this$props.speed,\n          circleRadius = _this$props.circleRadius,\n          data = _this$props.data;\n      var animate = [Animated.delay(delay)];\n      var counter = 0;\n      this.lineAnimated.forEach(function (element, j) {\n        var staggerCircle = [];\n        console.log('the counter is', counter);\n\n        for (var k = counter; k < data[j].length + counter; k++) {\n          staggerCircle.push(Animated.spring(_this.AnimatedPoints[k].r, {\n            toValue: circleRadius,\n            speed: speed\n          }));\n        }\n\n        _this.AnimatedPoints.map(function (point, i) {\n          if (i < data[j].length + counter && i >= counter) return;\n          return null;\n        });\n\n        animate.push(Animated.parallel([Animated.timing(element.strokeDashoffset, {\n          toValue: 0,\n          duration: duration\n        })]), Animated.stagger(staggerLength, staggerCircle));\n        counter = counter + data[j].length;\n      });\n      Animated.sequence(animate).start();\n    }\n  }, {\n    key: \"treeManipulation\",\n    value: function treeManipulation() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          data = _this$props2.data,\n          leftAxisData = _this$props2.leftAxisData,\n          bottomAxisData = _this$props2.bottomAxisData,\n          legendColor = _this$props2.legendColor,\n          legendText = _this$props2.legendText,\n          minX = _this$props2.minX,\n          minY = _this$props2.minY,\n          maxX = _this$props2.maxX,\n          maxY = _this$props2.maxY,\n          scatterPlotEnable = _this$props2.scatterPlotEnable,\n          dataPointsVisible = _this$props2.dataPointsVisible,\n          hideAxis = _this$props2.hideAxis,\n          hideXAxisLabels = _this$props2.hideXAxisLabels,\n          hideYAxisLabels = _this$props2.hideYAxisLabels,\n          showLegends = _this$props2.showLegends,\n          axisColor = _this$props2.axisColor,\n          axisLabelColor = _this$props2.axisLabelColor,\n          axisLineWidth = _this$props2.axisLineWidth,\n          chartFontSize = _this$props2.chartFontSize,\n          Color = _this$props2.Color,\n          chartHeight = _this$props2.chartHeight,\n          chartWidth = _this$props2.chartWidth,\n          tickColorXAxis = _this$props2.tickColorXAxis,\n          tickColorYAxis = _this$props2.tickColorYAxis,\n          tickWidthXAxis = _this$props2.tickWidthXAxis,\n          tickWidthYAxis = _this$props2.tickWidthYAxis,\n          lineWidth = _this$props2.lineWidth,\n          circleRadiusWidth = _this$props2.circleRadiusWidth,\n          circleRadius = _this$props2.circleRadius,\n          showTicks = _this$props2.showTicks,\n          legendStyle = _this$props2.legendStyle,\n          lineStrokeOpacity = _this$props2.lineStrokeOpacity,\n          lineStrokeDashArray = _this$props2.lineStrokeDashArray,\n          showDashedLine = _this$props2.showDashedLine,\n          leftAxisDataToShow = _this$props2.leftAxisDataToShow,\n          bottomAxisDataToShow = _this$props2.bottomAxisDataToShow,\n          pointDataToShowOnGraph = _this$props2.pointDataToShowOnGraph,\n          circleLegendType = _this$props2.circleLegendType,\n          fillArea = _this$props2.fillArea,\n          animation = _this$props2.animation;\n      var _this$props3 = this.props,\n          yAxisGrid = _this$props3.yAxisGrid,\n          xAxisGrid = _this$props3.xAxisGrid,\n          hideXAxis = _this$props3.hideXAxis,\n          hideYAxis = _this$props3.hideYAxis,\n          inclindTick = _this$props3.inclindTick;\n      this.lineAnimated = new Array(data.length);\n      var xScale = d3.scaleLinear().range([MARGINS.left, chartWidth - MARGINS.right]).domain([minX, maxX]),\n          yScale = d3.scaleLinear().range([chartHeight - MARGINS.top, MARGINS.bottom]).domain([minY, maxY]),\n          xAxis = d3.axisBottom(xScale),\n          yAxis = d3.axisLeft(yScale).ticks(d3.timeDay, 1).tickFormat(d3.timeFormat('%a %d'));\n      var TICKSIZE = chartWidth / 35;\n      var x = 0,\n          y = chartHeight - MARGINS.top;\n      var endX = x + chartWidth;\n      var endY = y;\n      xCoordinate = hideAxis ? null : React.createElement(G, {\n        fill: \"none\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 9\n        }\n      }, hideXAxis ? null : React.createElement(Line, {\n        stroke: axisColor,\n        strokeWidth: axisLineWidth,\n        x1: x + 30,\n        x2: endX + 30,\n        y1: y,\n        y2: endY,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 15\n        }\n      }), showTicks ? _.map(bottomAxisData, function (d, i) {\n        return React.createElement(Line, {\n          key: i,\n          stroke: tickColorXAxis,\n          strokeWidth: tickWidthXAxis,\n          x1: xScale(d) + 10,\n          y1: y,\n          x2: inclindTick ? xScale(d) - 2 : xScale(d) + 10,\n          y2: xAxisGrid ? 20 : y + TICKSIZE,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 19\n          }\n        });\n      }) : null, hideXAxisLabels ? null : _.map(bottomAxisData, function (d, i) {\n        return React.createElement(Text, {\n          key: i,\n          fill: axisLabelColor,\n          fontSize: chartFontSize,\n          textAnchor: \"middle\",\n          x: inclindTick ? xScale(d) - 2 : xScale(d) + 10,\n          y: chartHeight + 10,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 19\n          }\n        }, bottomAxisDataToShow[i]);\n      }));\n      var xx = 0,\n          yy = chartHeight;\n      var endXX = xx;\n      var endYY = yy - chartWidth;\n      yCoordinate = hideAxis ? null : React.createElement(G, {\n        fill: \"none\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 9\n        }\n      }, hideYAxis ? null : React.createElement(Line, {\n        stroke: axisColor,\n        strokeWidth: axisLineWidth,\n        x1: xx + 40,\n        x2: endXX + 40,\n        y1: yy,\n        y2: endYY,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 15\n        }\n      }), showTicks ? _.map(leftAxisData, function (d, i) {\n        return React.createElement(Line, {\n          key: i,\n          stroke: tickColorYAxis,\n          strokeWidth: tickWidthYAxis,\n          x1: xx + 40,\n          y1: yScale(d),\n          x2: yAxisGrid ? chartWidth - 10 : xx + 30,\n          y2: inclindTick ? yScale(d) - 5 : yScale(d),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 19\n          }\n        });\n      }) : null, hideYAxisLabels ? null : _.map(leftAxisData, function (d, i) {\n        return React.createElement(Text, {\n          key: i,\n          fill: axisLabelColor,\n          fontSize: chartFontSize,\n          textAnchor: \"middle\",\n          x: inclindTick ? xx + 25 : xx + 20,\n          y: inclindTick ? yScale(d) - 20 : yScale(d) - 8,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 19\n          }\n        }, leftAxisDataToShow[i]);\n      }));\n      var lineGen = d3.line().x(function (d) {\n        return xScale(d.x) + 10;\n      }).y(function (d) {\n        return yScale(d.y);\n      });\n      var linePointsData = formatLineData(data);\n      linePathOne = scatterPlotEnable ? null : animation ? _.map(linePointsData, function (data, i) {\n        _this2.lineAnimated[i] = createLineProps(data);\n        return React.createElement(NativePath, _extends({}, _this2.lineAnimated[i], {\n          strokeOpacity: lineStrokeOpacity,\n          key: i,\n          fill: 'none',\n          stroke: Color[i] ? Color[i] : '#000',\n          strokeWidth: lineWidth,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 327,\n            columnNumber: 17\n          }\n        }));\n      }) : _.map(linePointsData, function (data, i) {\n        return React.createElement(Path, {\n          strokeOpacity: lineStrokeOpacity,\n          strokeDasharray: showDashedLine ? lineStrokeDashArray[i] : '',\n          key: i,\n          d: data,\n          fill: fillArea ? Color[i] ? Color[i] : '#000' : 'none',\n          stroke: Color[i] ? Color[i] : '#000',\n          strokeWidth: lineWidth,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 17\n          }\n        });\n      });\n      var dataPointsColor = buildColorArray(data, Color);\n      var pointData = calculateOverallLineChartData(data);\n      this.AnimatedPoints = new Array(pointData.length);\n      circleInFirstLine = dataPointsVisible ? _.map(pointData, function (d, i) {\n        var text;\n        _this2.AnimatedPoints[i] = createCircleProps(d, dataPointsColor[i]);\n        text = React.createElement(Text, {\n          fontSize: chartFontSize,\n          x: xScale(d.x) + 10,\n          y: yScale(d.y) + 5,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 360,\n            columnNumber: 13\n          }\n        }, pointDataToShowOnGraph == 'Y' ? d.y : pointDataToShowOnGraph == 'X' ? d.x : '');\n        console.log('the anim points are', _this2.AnimatedPoints[i]);\n        return React.createElement(G, {\n          key: i,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 372,\n            columnNumber: 13\n          }\n        }, animation ? React.createElement(NativeCircle, _extends({\n          key: 'circle_' + i\n        }, _this2.AnimatedPoints[i], {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 374,\n            columnNumber: 19\n          }\n        })) : React.createElement(Circle, {\n          key: 'circle_' + i,\n          strokeWidth: circleRadiusWidth,\n          stroke: dataPointsColor[i],\n          d: d.x,\n          fill: 'white',\n          cx: xScale(d.x) + 10,\n          cy: yScale(d.y),\n          r: circleRadius,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 378,\n            columnNumber: 19\n          }\n        }), text);\n      }) : null;\n      legend = showLegends ? createLegend(legendColor, legendText, chartWidth, MARGINS, legendStyle, circleLegendType) : null;\n\n      function formatLineData(data) {\n        var linePointsData = [],\n            lineDataArray = [];\n\n        for (var _i = 0; _i < data.length; _i++) {\n          lineDataArray.push(data[_i]);\n        }\n\n        for (var i = 0; i < lineDataArray.length; i++) {\n          linePointsData.push(lineGen(lineDataArray[i]));\n        }\n\n        return linePointsData;\n      }\n\n      function createCircleProps(d, strokeColor) {\n        return {\n          r: new Animated.Value(0),\n          cx: xScale(d.x) + 10,\n          cy: yScale(d.y),\n          stroke: strokeColor,\n          strokeWidth: circleRadiusWidth,\n          fill: 'white'\n        };\n      }\n\n      if (animation) this.animate();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      this.treeManipulation();\n      var _this$props4 = this.props,\n          GraphWidth = _this$props4.GraphWidth,\n          GraphHeight = _this$props4.GraphHeight;\n      return React.createElement(Svg, {\n        width: GraphWidth,\n        height: GraphHeight,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 434,\n          columnNumber: 7\n        }\n      }, React.createElement(G, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 435,\n          columnNumber: 9\n        }\n      }, yCoordinate, xCoordinate, linePathOne, circleInFirstLine, legend));\n    }\n  }]);\n\n  return MulipleLineChart;\n}(Component);\n\nMulipleLineChart.defaultProps = {\n  data: dummyData,\n  leftAxisData: leftAxisData,\n  bottomAxisData: bottomAxisData,\n  axisColor: '#000',\n  axisLabelColor: '#000',\n  axisLineWidth: 1,\n  chartFontSize: 10,\n  color: [],\n  dataPointRadius: 3,\n  lineWidth: 2,\n  hideAxis: false,\n  dataPointsVisible: true,\n  hideXAxisLabels: false,\n  hideYAxisLabels: false,\n  chartHeight: HEIGHT,\n  chartWidth: WIDTH,\n  showLegends: true,\n  tickColorXAxis: '#000',\n  tickWidthXAxis: '1',\n  tickColorYAxis: '#000',\n  tickWidthYAxis: '1',\n  circleRadiusWidth: '2.5',\n  circleRadius: 3,\n  showTicks: true,\n  lineStrokeOpacity: 1,\n  lineStrokeDashArray: ['3', '0'],\n  showDashedLine: false,\n  GraphWidth: 400,\n  GraphHeight: 500,\n  bottomAxisDataToShow: bottomAxisData,\n  leftAxisDataToShow: leftAxisData,\n  pointDataToShowOnGraph: 'Y',\n  legendStyle: {\n    width: 50,\n    fillOpacity: 0.5,\n    height: 20,\n    strokeWidth: 2,\n    legendFontSize: 12,\n    legentTextFill: 'black'\n  },\n  circleLegendType: true,\n  fillArea: false,\n  yAxisGrid: false,\n  xAxisGrid: false,\n  hideXAxis: false,\n  hideYAxis: false,\n  inclindTick: true,\n  animation: true,\n  delay: 500,\n  duration: 2000,\n  staggerLength: 200,\n  speed: 40\n};\nexport { MulipleLineChart as default };","map":{"version":3,"sources":["C:/Users/winston/Documents/react-native-boilerplate-master/node_modules/react-native-d3multiline-chart/multipleLineChart.js"],"names":["React","Component","Svg","Circle","Line","G","Path","Text","Rect","d3","scale","_","createLegend","NativePath","NativeCircle","svgPathProperties","calculateOverallLineChartData","buildColorArray","dummyData","leftAxisData","bottomAxisData","linePathOne","linePathSecond","xCoordinate","yCoordinate","pointsOnLine","circleInFirstLine","circleInSecondLine","legend","WIDTH","HEIGHT","MARGINS","top","right","bottom","left","createLineProps","path","properties","length","getTotalLength","console","log","d","strokeDashoffset","Animated","Value","strokeDasharray","MulipleLineChart","props","delay","duration","staggerLength","speed","circleRadius","data","animate","counter","lineAnimated","forEach","element","j","staggerCircle","k","push","spring","AnimatedPoints","r","toValue","map","point","i","parallel","timing","stagger","sequence","start","legendColor","legendText","minX","minY","maxX","maxY","scatterPlotEnable","dataPointsVisible","hideAxis","hideXAxisLabels","hideYAxisLabels","showLegends","axisColor","axisLabelColor","axisLineWidth","chartFontSize","Color","chartHeight","chartWidth","tickColorXAxis","tickColorYAxis","tickWidthXAxis","tickWidthYAxis","lineWidth","circleRadiusWidth","showTicks","legendStyle","lineStrokeOpacity","lineStrokeDashArray","showDashedLine","leftAxisDataToShow","bottomAxisDataToShow","pointDataToShowOnGraph","circleLegendType","fillArea","animation","yAxisGrid","xAxisGrid","hideXAxis","hideYAxis","inclindTick","Array","xScale","scaleLinear","range","domain","yScale","xAxis","axisBottom","yAxis","axisLeft","ticks","timeDay","tickFormat","timeFormat","TICKSIZE","x","y","endX","endY","xx","yy","endXX","endYY","lineGen","line","linePointsData","formatLineData","dataPointsColor","pointData","text","createCircleProps","lineDataArray","strokeColor","cx","cy","stroke","strokeWidth","fill","treeManipulation","GraphWidth","GraphHeight","defaultProps","color","dataPointRadius","width","fillOpacity","height","legendFontSize","legentTextFill"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;;;;AAEA,OAAOC,GAAP,IAAaC,MAAb,EAAqBC,IAArB,EAA2BC,CAA3B,EAA8BC,IAA9B,EAAoCC,IAApC,EAA0CC,IAA1C,QAAqD,kBAArD;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,OAAO,KAAKC,KAAZ,MAAuB,UAAvB;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,OAAOC,YAAP;AACA,OAAOC,UAAP;AACA,OAAOC,YAAP;AACA,SAAQC,iBAAR,QAAgC,qBAAhC;AACA,SACEC,6BADF,EAEEC,eAFF;AAIA,SAAQC,SAAR,EAAmBC,YAAnB,EAAiCC,cAAjC;AAEA,IAAIC,WAAJ,EACEC,cADF,EAEEC,WAFF,EAGEC,WAHF,EAIEC,YAJF,EAKEC,iBALF,EAMEC,kBANF,EAOEC,MAPF;AASA,IAAIC,KAAK,GAAG,GAAZ;AAAA,IACEC,MAAM,GAAG,GADX;AAAA,IAEEC,OAAO,GAAG;AACRC,EAAAA,GAAG,EAAE,EADG;AAERC,EAAAA,KAAK,EAAE,EAFC;AAGRC,EAAAA,MAAM,EAAE,EAHA;AAIRC,EAAAA,IAAI,EAAE;AAJE,CAFZ;;AASA,SAASC,eAAT,CAA0BC,IAA1B,EAAgC;AAC9B,MAAMC,UAAU,GAAGvB,iBAAiB,CAAEsB,IAAF,CAApC;AACA,MAAME,MAAM,GAAGD,UAAU,CAACE,cAAX,EAAf;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAa,YAAb,EAA2BH,MAA3B;AACA,SAAO;AACLI,IAAAA,CAAC,EAAEN,IADE;AAELO,IAAAA,gBAAgB,EAAE,IAAIC,QAAQ,CAACC,KAAb,CAAoBP,MAApB,CAFb;AAGLQ,IAAAA,eAAe,EAAE,CAACR,MAAD,EAASA,MAAT;AAHZ,GAAP;AAKD;;IAEoBS,gB;;;;;AAwDnB,4BAAaC,KAAb,EAAoB;AAAA;;AAAA,6BACXA,KADW;AAGnB;;;;WAED,mBAAW;AAAA;;AAAA,wBAQL,KAAKA,KARA;AAAA,UAEPC,KAFO,eAEPA,KAFO;AAAA,UAGPC,QAHO,eAGPA,QAHO;AAAA,UAIPC,aAJO,eAIPA,aAJO;AAAA,UAKPC,KALO,eAKPA,KALO;AAAA,UAMPC,YANO,eAMPA,YANO;AAAA,UAOPC,IAPO,eAOPA,IAPO;AAST,UAAMC,OAAO,GAAG,CAACX,QAAQ,CAACK,KAAT,CAAgBA,KAAhB,CAAD,CAAhB;AACA,UAAIO,OAAO,GAAG,CAAd;AACA,WAAKC,YAAL,CAAkBC,OAAlB,CAA2B,UAACC,OAAD,EAAUC,CAAV,EAAgB;AACzC,YAAIC,aAAa,GAAG,EAApB;AACArB,QAAAA,OAAO,CAACC,GAAR,CAAa,gBAAb,EAA+Be,OAA/B;;AACA,aAAK,IAAIM,CAAC,GAAGN,OAAb,EAAsBM,CAAC,GAAGR,IAAI,CAACM,CAAD,CAAJ,CAAQtB,MAAR,GAAiBkB,OAA3C,EAAoDM,CAAC,EAArD,EAAyD;AACvDD,UAAAA,aAAa,CAACE,IAAd,CACEnB,QAAQ,CAACoB,MAAT,CAAiB,KAAI,CAACC,cAAL,CAAoBH,CAApB,EAAuBI,CAAxC,EAA2C;AACzCC,YAAAA,OAAO,EAAEd,YADgC;AAEzCD,YAAAA,KAAK,EAALA;AAFyC,WAA3C,CADF;AAMD;;AACD,QAAA,KAAI,CAACa,cAAL,CAAoBG,GAApB,CAAyB,UAACC,KAAD,EAAQC,CAAR,EAAc;AACrC,cAAIA,CAAC,GAAGhB,IAAI,CAACM,CAAD,CAAJ,CAAQtB,MAAR,GAAiBkB,OAArB,IAAgCc,CAAC,IAAId,OAAzC,EAAkD;AAClD,iBAAO,IAAP;AACD,SAHD;;AAIAD,QAAAA,OAAO,CAACQ,IAAR,CACEnB,QAAQ,CAAC2B,QAAT,CAAmB,CACjB3B,QAAQ,CAAC4B,MAAT,CAAiBb,OAAO,CAAChB,gBAAzB,EAA2C;AACzCwB,UAAAA,OAAO,EAAE,CADgC;AAEzCjB,UAAAA,QAAQ,EAARA;AAFyC,SAA3C,CADiB,CAAnB,CADF,EAOEN,QAAQ,CAAC6B,OAAT,CAAkBtB,aAAlB,EAAiCU,aAAjC,CAPF;AASAL,QAAAA,OAAO,GAAGA,OAAO,GAAGF,IAAI,CAACM,CAAD,CAAJ,CAAQtB,MAA5B;AACD,OAzBD;AA0BAM,MAAAA,QAAQ,CAAC8B,QAAT,CAAmBnB,OAAnB,EAA4BoB,KAA5B;AACD;;;WAED,4BAAoB;AAAA;;AAAA,yBA0Cd,KAAK3B,KA1CS;AAAA,UAEhBM,IAFgB,gBAEhBA,IAFgB;AAAA,UAGhBpC,YAHgB,gBAGhBA,YAHgB;AAAA,UAIhBC,cAJgB,gBAIhBA,cAJgB;AAAA,UAKhByD,WALgB,gBAKhBA,WALgB;AAAA,UAMhBC,UANgB,gBAMhBA,UANgB;AAAA,UAOhBC,IAPgB,gBAOhBA,IAPgB;AAAA,UAQhBC,IARgB,gBAQhBA,IARgB;AAAA,UAShBC,IATgB,gBAShBA,IATgB;AAAA,UAUhBC,IAVgB,gBAUhBA,IAVgB;AAAA,UAWhBC,iBAXgB,gBAWhBA,iBAXgB;AAAA,UAYhBC,iBAZgB,gBAYhBA,iBAZgB;AAAA,UAahBC,QAbgB,gBAahBA,QAbgB;AAAA,UAchBC,eAdgB,gBAchBA,eAdgB;AAAA,UAehBC,eAfgB,gBAehBA,eAfgB;AAAA,UAgBhBC,WAhBgB,gBAgBhBA,WAhBgB;AAAA,UAiBhBC,SAjBgB,gBAiBhBA,SAjBgB;AAAA,UAkBhBC,cAlBgB,gBAkBhBA,cAlBgB;AAAA,UAmBhBC,aAnBgB,gBAmBhBA,aAnBgB;AAAA,UAoBhBC,aApBgB,gBAoBhBA,aApBgB;AAAA,UAqBhBC,KArBgB,gBAqBhBA,KArBgB;AAAA,UAsBhBC,WAtBgB,gBAsBhBA,WAtBgB;AAAA,UAuBhBC,UAvBgB,gBAuBhBA,UAvBgB;AAAA,UAwBhBC,cAxBgB,gBAwBhBA,cAxBgB;AAAA,UAyBhBC,cAzBgB,gBAyBhBA,cAzBgB;AAAA,UA0BhBC,cA1BgB,gBA0BhBA,cA1BgB;AAAA,UA2BhBC,cA3BgB,gBA2BhBA,cA3BgB;AAAA,UA4BhBC,SA5BgB,gBA4BhBA,SA5BgB;AAAA,UA6BhBC,iBA7BgB,gBA6BhBA,iBA7BgB;AAAA,UA8BhB/C,YA9BgB,gBA8BhBA,YA9BgB;AAAA,UA+BhBgD,SA/BgB,gBA+BhBA,SA/BgB;AAAA,UAgChBC,WAhCgB,gBAgChBA,WAhCgB;AAAA,UAiChBC,iBAjCgB,gBAiChBA,iBAjCgB;AAAA,UAkChBC,mBAlCgB,gBAkChBA,mBAlCgB;AAAA,UAmChBC,cAnCgB,gBAmChBA,cAnCgB;AAAA,UAoChBC,kBApCgB,gBAoChBA,kBApCgB;AAAA,UAqChBC,oBArCgB,gBAqChBA,oBArCgB;AAAA,UAsChBC,sBAtCgB,gBAsChBA,sBAtCgB;AAAA,UAuChBC,gBAvCgB,gBAuChBA,gBAvCgB;AAAA,UAwChBC,QAxCgB,gBAwChBA,QAxCgB;AAAA,UAyChBC,SAzCgB,gBAyChBA,SAzCgB;AAAA,yBAiDd,KAAK/D,KAjDS;AAAA,UA4ChBgE,SA5CgB,gBA4ChBA,SA5CgB;AAAA,UA6ChBC,SA7CgB,gBA6ChBA,SA7CgB;AAAA,UA8ChBC,SA9CgB,gBA8ChBA,SA9CgB;AAAA,UA+ChBC,SA/CgB,gBA+ChBA,SA/CgB;AAAA,UAgDhBC,WAhDgB,gBAgDhBA,WAhDgB;AAkDlB,WAAK3D,YAAL,GAAoB,IAAI4D,KAAJ,CAAW/D,IAAI,CAAChB,MAAhB,CAApB;AACA,UAAMgF,MAAM,GAAG9G,EAAE,CACd+G,WADY,GAEZC,KAFY,CAEL,CAAC1F,OAAO,CAACI,IAAT,EAAe4D,UAAU,GAAGhE,OAAO,CAACE,KAApC,CAFK,EAGZyF,MAHY,CAGJ,CAAC3C,IAAD,EAAOE,IAAP,CAHI,CAAf;AAAA,UAIE0C,MAAM,GAAGlH,EAAE,CACR+G,WADM,GAENC,KAFM,CAEC,CAAC3B,WAAW,GAAG/D,OAAO,CAACC,GAAvB,EAA4BD,OAAO,CAACG,MAApC,CAFD,EAGNwF,MAHM,CAGE,CAAC1C,IAAD,EAAOE,IAAP,CAHF,CAJX;AAAA,UAQE0C,KAAK,GAAGnH,EAAE,CAACoH,UAAH,CAAeN,MAAf,CARV;AAAA,UASEO,KAAK,GAAGrH,EAAE,CACPsH,QADK,CACKJ,MADL,EAELK,KAFK,CAEEvH,EAAE,CAACwH,OAFL,EAEc,CAFd,EAGLC,UAHK,CAGOzH,EAAE,CAAC0H,UAAH,CAAe,OAAf,CAHP,CATV;AAaA,UAAMC,QAAQ,GAAGrC,UAAU,GAAG,EAA9B;AACA,UAAIsC,CAAC,GAAG,CAAR;AAAA,UAAWC,CAAC,GAAGxC,WAAW,GAAG/D,OAAO,CAACC,GAArC;AACA,UAAIuG,IAAI,GAAGF,CAAC,GAAGtC,UAAf;AACA,UAAIyC,IAAI,GAAGF,CAAX;AACA/G,MAAAA,WAAW,GAAG8D,QAAQ,GAClB,IADkB,GAElB,oBAAC,CAAD;AAAG,QAAA,IAAI,EAAC,MAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG8B,SAAS,GACN,IADM,GAEN,oBAAC,IAAD;AACE,QAAA,MAAM,EAAE1B,SADV;AAEE,QAAA,WAAW,EAAEE,aAFf;AAGE,QAAA,EAAE,EAAE0C,CAAC,GAAG,EAHV;AAIE,QAAA,EAAE,EAAEE,IAAI,GAAG,EAJb;AAKE,QAAA,EAAE,EAAED,CALN;AAME,QAAA,EAAE,EAAEE,IANN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHN,EAWGlC,SAAS,GACN3F,CAAC,CAAC0D,GAAF,CAAOjD,cAAP,EAAuB,UAAUuB,CAAV,EAAa4B,CAAb,EAAgB;AACrC,eACE,oBAAC,IAAD;AACE,UAAA,GAAG,EAAEA,CADP;AAEE,UAAA,MAAM,EAAEyB,cAFV;AAGE,UAAA,WAAW,EAAEE,cAHf;AAIE,UAAA,EAAE,EAAEqB,MAAM,CAAE5E,CAAF,CAAN,GAAa,EAJnB;AAKE,UAAA,EAAE,EAAE2F,CALN;AAME,UAAA,EAAE,EAAEjB,WAAW,GAAGE,MAAM,CAAE5E,CAAF,CAAN,GAAa,CAAhB,GAAoB4E,MAAM,CAAE5E,CAAF,CAAN,GAAa,EANlD;AAOE,UAAA,EAAE,EAAEuE,SAAS,GAAG,EAAH,GAAQoB,CAAC,GAAGF,QAP3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,OAZD,CADM,GAcN,IAzBN,EA0BG9C,eAAe,GACZ,IADY,GAEZ3E,CAAC,CAAC0D,GAAF,CAAOjD,cAAP,EAAuB,UAAUuB,CAAV,EAAa4B,CAAb,EAAgB;AACrC,eACE,oBAAC,IAAD;AACE,UAAA,GAAG,EAAEA,CADP;AAEE,UAAA,IAAI,EAAEmB,cAFR;AAGE,UAAA,QAAQ,EAAEE,aAHZ;AAIE,UAAA,UAAU,EAAC,QAJb;AAKE,UAAA,CAAC,EAAEyB,WAAW,GAAGE,MAAM,CAAE5E,CAAF,CAAN,GAAa,CAAhB,GAAoB4E,MAAM,CAAE5E,CAAF,CAAN,GAAa,EALjD;AAME,UAAA,CAAC,EAAEmD,WAAW,GAAG,EANnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAQGc,oBAAoB,CAACrC,CAAD,CARvB,CADF;AAYD,OAbD,CA5BN,CAFJ;AA8CA,UAAIkE,EAAE,GAAG,CAAT;AAAA,UAAYC,EAAE,GAAG5C,WAAjB;AACA,UAAI6C,KAAK,GAAGF,EAAZ;AACA,UAAIG,KAAK,GAAGF,EAAE,GAAG3C,UAAjB;AACAvE,MAAAA,WAAW,GAAG6D,QAAQ,GAClB,IADkB,GAElB,oBAAC,CAAD;AAAG,QAAA,IAAI,EAAC,MAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG+B,SAAS,GACN,IADM,GAEN,oBAAC,IAAD;AACE,QAAA,MAAM,EAAE3B,SADV;AAEE,QAAA,WAAW,EAAEE,aAFf;AAGE,QAAA,EAAE,EAAE8C,EAAE,GAAG,EAHX;AAIE,QAAA,EAAE,EAAEE,KAAK,GAAG,EAJd;AAKE,QAAA,EAAE,EAAED,EALN;AAME,QAAA,EAAE,EAAEE,KANN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHN,EAWGtC,SAAS,GACN3F,CAAC,CAAC0D,GAAF,CAAOlD,YAAP,EAAqB,UAAUwB,CAAV,EAAa4B,CAAb,EAAgB;AACnC,eACE,oBAAC,IAAD;AACE,UAAA,GAAG,EAAEA,CADP;AAEE,UAAA,MAAM,EAAE0B,cAFV;AAGE,UAAA,WAAW,EAAEE,cAHf;AAIE,UAAA,EAAE,EAAEsC,EAAE,GAAG,EAJX;AAKE,UAAA,EAAE,EAAEd,MAAM,CAAEhF,CAAF,CALZ;AAME,UAAA,EAAE,EAAEsE,SAAS,GAAGlB,UAAU,GAAG,EAAhB,GAAqB0C,EAAE,GAAG,EANzC;AAOE,UAAA,EAAE,EAAEpB,WAAW,GAAGM,MAAM,CAAEhF,CAAF,CAAN,GAAa,CAAhB,GAAoBgF,MAAM,CAAEhF,CAAF,CAP3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,OAZD,CADM,GAcN,IAzBN,EA0BG4C,eAAe,GACZ,IADY,GAEZ5E,CAAC,CAAC0D,GAAF,CAAOlD,YAAP,EAAqB,UAAUwB,CAAV,EAAa4B,CAAb,EAAgB;AACnC,eACE,oBAAC,IAAD;AACE,UAAA,GAAG,EAAEA,CADP;AAEE,UAAA,IAAI,EAAEmB,cAFR;AAGE,UAAA,QAAQ,EAAEE,aAHZ;AAIE,UAAA,UAAU,EAAC,QAJb;AAKE,UAAA,CAAC,EAAEyB,WAAW,GAAGoB,EAAE,GAAG,EAAR,GAAaA,EAAE,GAAG,EALlC;AAME,UAAA,CAAC,EAAEpB,WAAW,GAAGM,MAAM,CAAEhF,CAAF,CAAN,GAAa,EAAhB,GAAqBgF,MAAM,CAAEhF,CAAF,CAAN,GAAa,CANlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAQGgE,kBAAkB,CAACpC,CAAD,CARrB,CADF;AAYD,OAbD,CA5BN,CAFJ;AA+CA,UAAIsE,OAAO,GAAGpI,EAAE,CACbqI,IADW,GAEXT,CAFW,CAER,UAAU1F,CAAV,EAAa;AACf,eAAO4E,MAAM,CAAE5E,CAAC,CAAC0F,CAAJ,CAAN,GAAe,EAAtB;AACD,OAJW,EAKXC,CALW,CAKR,UAAU3F,CAAV,EAAa;AACf,eAAOgF,MAAM,CAAEhF,CAAC,CAAC2F,CAAJ,CAAb;AACD,OAPW,CAAd;AASA,UAAIS,cAAc,GAAGC,cAAc,CAAEzF,IAAF,CAAnC;AACAlC,MAAAA,WAAW,GAAG8D,iBAAiB,GAC3B,IAD2B,GAE3B6B,SAAS,GACLrG,CAAC,CAAC0D,GAAF,CAAO0E,cAAP,EAAuB,UAACxF,IAAD,EAAOgB,CAAP,EAAa;AAClC,QAAA,MAAI,CAACb,YAAL,CAAkBa,CAAlB,IAAuBnC,eAAe,CAAEmB,IAAF,CAAtC;AACA,eACE,oBAAC,UAAD,eACM,MAAI,CAACG,YAAL,CAAkBa,CAAlB,CADN;AAEE,UAAA,aAAa,EAAEiC,iBAFjB;AAGE,UAAA,GAAG,EAAEjC,CAHP;AAIE,UAAA,IAAI,EAAE,MAJR;AAKE,UAAA,MAAM,EAAEsB,KAAK,CAACtB,CAAD,CAAL,GAAWsB,KAAK,CAACtB,CAAD,CAAhB,GAAsB,MALhC;AAME,UAAA,WAAW,EAAE6B,SANf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAUD,OAZD,CADK,GAcLzF,CAAC,CAAC0D,GAAF,CAAO0E,cAAP,EAAuB,UAACxF,IAAD,EAAOgB,CAAP,EAAa;AAClC,eACE,oBAAC,IAAD;AACE,UAAA,aAAa,EAAEiC,iBADjB;AAEE,UAAA,eAAe,EAAEE,cAAc,GAAGD,mBAAmB,CAAClC,CAAD,CAAtB,GAA4B,EAF7D;AAGE,UAAA,GAAG,EAAEA,CAHP;AAIE,UAAA,CAAC,EAAEhB,IAJL;AAKE,UAAA,IAAI,EAAEwD,QAAQ,GAAIlB,KAAK,CAACtB,CAAD,CAAL,GAAWsB,KAAK,CAACtB,CAAD,CAAhB,GAAsB,MAA1B,GAAoC,MALpD;AAME,UAAA,MAAM,EAAEsB,KAAK,CAACtB,CAAD,CAAL,GAAWsB,KAAK,CAACtB,CAAD,CAAhB,GAAsB,MANhC;AAOE,UAAA,WAAW,EAAE6B,SAPf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,OAZD,CAhBR;AA6BA,UAAI6C,eAAe,GAAGhI,eAAe,CAAEsC,IAAF,EAAQsC,KAAR,CAArC;AAEA,UAAIqD,SAAS,GAAGlI,6BAA6B,CAAEuC,IAAF,CAA7C;AACA,WAAKW,cAAL,GAAsB,IAAIoD,KAAJ,CAAW4B,SAAS,CAAC3G,MAArB,CAAtB;AAEAb,MAAAA,iBAAiB,GAAG0D,iBAAiB,GACjCzE,CAAC,CAAC0D,GAAF,CAAO6E,SAAP,EAAkB,UAACvG,CAAD,EAAI4B,CAAJ,EAAU;AAC1B,YAAI4E,IAAJ;AACA,QAAA,MAAI,CAACjF,cAAL,CAAoBK,CAApB,IAAyB6E,iBAAiB,CAAEzG,CAAF,EAAKsG,eAAe,CAAC1E,CAAD,CAApB,CAA1C;AACA4E,QAAAA,IAAI,GACF,oBAAC,IAAD;AACE,UAAA,QAAQ,EAAEvD,aADZ;AAEE,UAAA,CAAC,EAAE2B,MAAM,CAAE5E,CAAC,CAAC0F,CAAJ,CAAN,GAAe,EAFpB;AAGE,UAAA,CAAC,EAAEV,MAAM,CAAEhF,CAAC,CAAC2F,CAAJ,CAAN,GAAe,CAHpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAKGzB,sBAAsB,IAAI,GAA1B,GACGlE,CAAC,CAAC2F,CADL,GAEGzB,sBAAsB,IAAI,GAA1B,GAAgClE,CAAC,CAAC0F,CAAlC,GAAsC,EAP5C,CADF;AAWA5F,QAAAA,OAAO,CAACC,GAAR,CAAa,qBAAb,EAAoC,MAAI,CAACwB,cAAL,CAAoBK,CAApB,CAApC;AACA,eACE,oBAAC,CAAD;AAAG,UAAA,GAAG,EAAEA,CAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACGyC,SAAS,GACN,oBAAC,YAAD;AACE,UAAA,GAAG,EAAE,YAAYzC;AADnB,WAEM,MAAI,CAACL,cAAL,CAAoBK,CAApB,CAFN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADM,GAKN,oBAAC,MAAD;AACE,UAAA,GAAG,EAAE,YAAYA,CADnB;AAEE,UAAA,WAAW,EAAE8B,iBAFf;AAGE,UAAA,MAAM,EAAE4C,eAAe,CAAC1E,CAAD,CAHzB;AAIE,UAAA,CAAC,EAAE5B,CAAC,CAAC0F,CAJP;AAKE,UAAA,IAAI,EAAE,OALR;AAME,UAAA,EAAE,EAAEd,MAAM,CAAE5E,CAAC,CAAC0F,CAAJ,CAAN,GAAe,EANrB;AAOE,UAAA,EAAE,EAAEV,MAAM,CAAEhF,CAAC,CAAC2F,CAAJ,CAPZ;AAQE,UAAA,CAAC,EAAEhF,YARL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UANN,EAgBG6F,IAhBH,CADF;AAoBD,OAnCD,CADiC,GAqCjC,IArCJ;AAuCAvH,MAAAA,MAAM,GAAG4D,WAAW,GAChB5E,YAAY,CACViE,WADU,EAEVC,UAFU,EAGViB,UAHU,EAIVhE,OAJU,EAKVwE,WALU,EAMVO,gBANU,CADI,GAShB,IATJ;;AAWA,eAASkC,cAAT,CAAyBzF,IAAzB,EAA+B;AAC7B,YAAIwF,cAAc,GAAG,EAArB;AAAA,YAAyBM,aAAa,GAAG,EAAzC;;AAEA,aAAK,IAAI9E,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGhB,IAAI,CAAChB,MAAzB,EAAiCgC,EAAC,EAAlC,EAAsC;AACpC8E,UAAAA,aAAa,CAACrF,IAAd,CAAoBT,IAAI,CAACgB,EAAD,CAAxB;AACD;;AACD,aAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG8E,aAAa,CAAC9G,MAAlC,EAA0CgC,CAAC,EAA3C,EAA+C;AAC7CwE,UAAAA,cAAc,CAAC/E,IAAf,CAAqB6E,OAAO,CAAEQ,aAAa,CAAC9E,CAAD,CAAf,CAA5B;AACD;;AAED,eAAOwE,cAAP;AACD;;AACD,eAASK,iBAAT,CAA4BzG,CAA5B,EAA+B2G,WAA/B,EAA4C;AAC1C,eAAO;AACLnF,UAAAA,CAAC,EAAE,IAAItB,QAAQ,CAACC,KAAb,CAAoB,CAApB,CADE;AAELyG,UAAAA,EAAE,EAAEhC,MAAM,CAAE5E,CAAC,CAAC0F,CAAJ,CAAN,GAAe,EAFd;AAGLmB,UAAAA,EAAE,EAAE7B,MAAM,CAAEhF,CAAC,CAAC2F,CAAJ,CAHL;AAILmB,UAAAA,MAAM,EAAEH,WAJH;AAKLI,UAAAA,WAAW,EAAErD,iBALR;AAMLsD,UAAAA,IAAI,EAAE;AAND,SAAP;AAQD;;AACD,UAAI3C,SAAJ,EAAe,KAAKxD,OAAL;AAChB;;;WAED,kBAAU;AACR,WAAKoG,gBAAL;AADQ,yBAE0B,KAAK3G,KAF/B;AAAA,UAED4G,UAFC,gBAEDA,UAFC;AAAA,UAEWC,WAFX,gBAEWA,WAFX;AAGR,aACE,oBAAC,GAAD;AAAK,QAAA,KAAK,EAAED,UAAZ;AAAwB,QAAA,MAAM,EAAEC,WAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,CAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGtI,WADH,EAEGD,WAFH,EAGGF,WAHH,EAIGK,iBAJH,EAKGE,MALH,CADF,CADF;AAWD;;;;EA9Y2C3B,S;;AAAzB+C,gB,CACZ+G,Y,GAAoB;AACzBxG,EAAAA,IAAI,EAAErC,SADmB;AAEzBC,EAAAA,YAAY,EAAEA,YAFW;AAGzBC,EAAAA,cAAc,EAAEA,cAHS;AAIzBqE,EAAAA,SAAS,EAAE,MAJc;AAKzBC,EAAAA,cAAc,EAAE,MALS;AAMzBC,EAAAA,aAAa,EAAE,CANU;AAOzBC,EAAAA,aAAa,EAAE,EAPU;AAQzBoE,EAAAA,KAAK,EAAE,EARkB;AASzBC,EAAAA,eAAe,EAAE,CATQ;AAUzB7D,EAAAA,SAAS,EAAE,CAVc;AAWzBf,EAAAA,QAAQ,EAAE,KAXe;AAYzBD,EAAAA,iBAAiB,EAAE,IAZM;AAazBE,EAAAA,eAAe,EAAE,KAbQ;AAczBC,EAAAA,eAAe,EAAE,KAdQ;AAezBO,EAAAA,WAAW,EAAEhE,MAfY;AAgBzBiE,EAAAA,UAAU,EAAElE,KAhBa;AAiBzB2D,EAAAA,WAAW,EAAE,IAjBY;AAkBzBQ,EAAAA,cAAc,EAAE,MAlBS;AAmBzBE,EAAAA,cAAc,EAAE,GAnBS;AAoBzBD,EAAAA,cAAc,EAAE,MApBS;AAqBzBE,EAAAA,cAAc,EAAE,GArBS;AAsBzBE,EAAAA,iBAAiB,EAAE,KAtBM;AAuBzB/C,EAAAA,YAAY,EAAE,CAvBW;AAwBzBgD,EAAAA,SAAS,EAAE,IAxBc;AAyBzBE,EAAAA,iBAAiB,EAAE,CAzBM;AA0BzBC,EAAAA,mBAAmB,EAAE,CAAC,GAAD,EAAM,GAAN,CA1BI;AA2BzBC,EAAAA,cAAc,EAAE,KA3BS;AA4BzBmD,EAAAA,UAAU,EAAE,GA5Ba;AA6BzBC,EAAAA,WAAW,EAAE,GA7BY;AA8BzBlD,EAAAA,oBAAoB,EAAExF,cA9BG;AA+BzBuF,EAAAA,kBAAkB,EAAExF,YA/BK;AAgCzB0F,EAAAA,sBAAsB,EAAE,GAhCC;AAiCzBN,EAAAA,WAAW,EAAE;AACX2D,IAAAA,KAAK,EAAE,EADI;AAEXC,IAAAA,WAAW,EAAE,GAFF;AAGXC,IAAAA,MAAM,EAAE,EAHG;AAIXV,IAAAA,WAAW,EAAE,CAJF;AAKXW,IAAAA,cAAc,EAAE,EALL;AAMXC,IAAAA,cAAc,EAAE;AANL,GAjCY;AAyCzBxD,EAAAA,gBAAgB,EAAE,IAzCO;AA0CzBC,EAAAA,QAAQ,EAAE,KA1Ce;AA2CzBE,EAAAA,SAAS,EAAE,KA3Cc;AA4CzBC,EAAAA,SAAS,EAAE,KA5Cc;AA6CzBC,EAAAA,SAAS,EAAE,KA7Cc;AA8CzBC,EAAAA,SAAS,EAAE,KA9Cc;AA+CzBC,EAAAA,WAAW,EAAE,IA/CY;AAgDzBL,EAAAA,SAAS,EAAE,IAhDc;AAiDzB9D,EAAAA,KAAK,EAAE,GAjDkB;AAkDzBC,EAAAA,QAAQ,EAAE,IAlDe;AAmDzBC,EAAAA,aAAa,EAAE,GAnDU;AAoDzBC,EAAAA,KAAK,EAAE;AApDkB,C;SADRL,gB","sourcesContent":["import React, {Component} from 'react';\r\nimport {StyleSheet, View, Animated} from 'react-native';\r\nimport Svg, {Circle, Line, G, Path, Text, Rect} from 'react-native-svg';\r\nimport * as d3 from 'd3';\r\nimport * as scale from 'd3-scale';\r\nimport _ from 'lodash';\r\nimport createLegend from './utils/createLegend';\r\nimport NativePath from './AnimatedSVG';\r\nimport NativeCircle from './AnimatedSVGCircle';\r\nimport {svgPathProperties} from 'svg-path-properties';\r\nimport {\r\n  calculateOverallLineChartData,\r\n  buildColorArray,\r\n} from './utils/dataCalculation';\r\nimport {dummyData, leftAxisData, bottomAxisData} from './dummyData';\r\n\r\nvar linePathOne,\r\n  linePathSecond,\r\n  xCoordinate,\r\n  yCoordinate,\r\n  pointsOnLine,\r\n  circleInFirstLine,\r\n  circleInSecondLine,\r\n  legend;\r\n\r\nvar WIDTH = 380,\r\n  HEIGHT = 380,\r\n  MARGINS = {\r\n    top: 20,\r\n    right: 20,\r\n    bottom: 20,\r\n    left: 30,\r\n  };\r\n\r\nfunction createLineProps (path) {\r\n  const properties = svgPathProperties (path);\r\n  const length = properties.getTotalLength ();\r\n  console.log ('the length', length);\r\n  return {\r\n    d: path,\r\n    strokeDashoffset: new Animated.Value (length),\r\n    strokeDasharray: [length, length],\r\n  };\r\n}\r\n\r\nexport default class MulipleLineChart extends Component {\r\n  static defaultProps: any = {\r\n    data: dummyData,\r\n    leftAxisData: leftAxisData,\r\n    bottomAxisData: bottomAxisData,\r\n    axisColor: '#000',\r\n    axisLabelColor: '#000',\r\n    axisLineWidth: 1,\r\n    chartFontSize: 10,\r\n    color: [],\r\n    dataPointRadius: 3,\r\n    lineWidth: 2,\r\n    hideAxis: false,\r\n    dataPointsVisible: true,\r\n    hideXAxisLabels: false,\r\n    hideYAxisLabels: false,\r\n    chartHeight: HEIGHT,\r\n    chartWidth: WIDTH,\r\n    showLegends: true,\r\n    tickColorXAxis: '#000',\r\n    tickWidthXAxis: '1',\r\n    tickColorYAxis: '#000',\r\n    tickWidthYAxis: '1',\r\n    circleRadiusWidth: '2.5',\r\n    circleRadius: 3,\r\n    showTicks: true,\r\n    lineStrokeOpacity: 1,\r\n    lineStrokeDashArray: ['3', '0'],\r\n    showDashedLine: false,\r\n    GraphWidth: 400,\r\n    GraphHeight: 500,\r\n    bottomAxisDataToShow: bottomAxisData,\r\n    leftAxisDataToShow: leftAxisData,\r\n    pointDataToShowOnGraph: 'Y',\r\n    legendStyle: {\r\n      width: 50,\r\n      fillOpacity: 0.5,\r\n      height: 20,\r\n      strokeWidth: 2,\r\n      legendFontSize: 12,\r\n      legentTextFill: 'black',\r\n    },\r\n    circleLegendType: true,\r\n    fillArea: false,\r\n    yAxisGrid: false,\r\n    xAxisGrid: false,\r\n    hideXAxis: false,\r\n    hideYAxis: false,\r\n    inclindTick: true,\r\n    animation: true,\r\n    delay: 500,\r\n    duration: 2000,\r\n    staggerLength: 200,\r\n    speed: 40,\r\n  };\r\n\r\n  constructor (props) {\r\n    super (props);\r\n    // this.lineAnimated = new Array (2);\r\n  }\r\n\r\n  animate () {\r\n    const {\r\n      delay,\r\n      duration,\r\n      staggerLength,\r\n      speed,\r\n      circleRadius,\r\n      data,\r\n    } = this.props;\r\n    const animate = [Animated.delay (delay)];\r\n    let counter = 0;\r\n    this.lineAnimated.forEach ((element, j) => {\r\n      let staggerCircle = [];\r\n      console.log ('the counter is', counter);\r\n      for (let k = counter; k < data[j].length + counter; k++) {\r\n        staggerCircle.push (\r\n          Animated.spring (this.AnimatedPoints[k].r, {\r\n            toValue: circleRadius,\r\n            speed,\r\n          })\r\n        );\r\n      }\r\n      this.AnimatedPoints.map ((point, i) => {\r\n        if (i < data[j].length + counter && i >= counter) return;\r\n        return null;\r\n      });\r\n      animate.push (\r\n        Animated.parallel ([\r\n          Animated.timing (element.strokeDashoffset, {\r\n            toValue: 0,\r\n            duration,\r\n          }),\r\n        ]),\r\n        Animated.stagger (staggerLength, staggerCircle)\r\n      );\r\n      counter = counter + data[j].length;\r\n    });\r\n    Animated.sequence (animate).start ();\r\n  }\r\n\r\n  treeManipulation () {\r\n    const {\r\n      data,\r\n      leftAxisData,\r\n      bottomAxisData,\r\n      legendColor,\r\n      legendText,\r\n      minX,\r\n      minY,\r\n      maxX,\r\n      maxY,\r\n      scatterPlotEnable,\r\n      dataPointsVisible,\r\n      hideAxis,\r\n      hideXAxisLabels,\r\n      hideYAxisLabels,\r\n      showLegends,\r\n      axisColor,\r\n      axisLabelColor,\r\n      axisLineWidth,\r\n      chartFontSize,\r\n      Color,\r\n      chartHeight,\r\n      chartWidth,\r\n      tickColorXAxis,\r\n      tickColorYAxis,\r\n      tickWidthXAxis,\r\n      tickWidthYAxis,\r\n      lineWidth,\r\n      circleRadiusWidth,\r\n      circleRadius,\r\n      showTicks,\r\n      legendStyle,\r\n      lineStrokeOpacity,\r\n      lineStrokeDashArray,\r\n      showDashedLine,\r\n      leftAxisDataToShow,\r\n      bottomAxisDataToShow,\r\n      pointDataToShowOnGraph,\r\n      circleLegendType,\r\n      fillArea,\r\n      animation,\r\n    } = this.props;\r\n    const {\r\n      yAxisGrid,\r\n      xAxisGrid,\r\n      hideXAxis,\r\n      hideYAxis,\r\n      inclindTick,\r\n    } = this.props;\r\n    this.lineAnimated = new Array (data.length);\r\n    const xScale = d3\r\n      .scaleLinear ()\r\n      .range ([MARGINS.left, chartWidth - MARGINS.right])\r\n      .domain ([minX, maxX]),\r\n      yScale = d3\r\n        .scaleLinear ()\r\n        .range ([chartHeight - MARGINS.top, MARGINS.bottom])\r\n        .domain ([minY, maxY]),\r\n      xAxis = d3.axisBottom (xScale),\r\n      yAxis = d3\r\n        .axisLeft (yScale)\r\n        .ticks (d3.timeDay, 1)\r\n        .tickFormat (d3.timeFormat ('%a %d'));\r\n    const TICKSIZE = chartWidth / 35;\r\n    let x = 0, y = chartHeight - MARGINS.top;\r\n    let endX = x + chartWidth;\r\n    let endY = y;\r\n    xCoordinate = hideAxis\r\n      ? null\r\n      : <G fill=\"none\">\r\n          {hideXAxis\r\n            ? null\r\n            : <Line\r\n                stroke={axisColor}\r\n                strokeWidth={axisLineWidth}\r\n                x1={x + 30}\r\n                x2={endX + 30}\r\n                y1={y}\r\n                y2={endY}\r\n              />}\r\n          {showTicks\r\n            ? _.map (bottomAxisData, function (d, i) {\r\n                return (\r\n                  <Line\r\n                    key={i}\r\n                    stroke={tickColorXAxis}\r\n                    strokeWidth={tickWidthXAxis}\r\n                    x1={xScale (d) + 10}\r\n                    y1={y}\r\n                    x2={inclindTick ? xScale (d) - 2 : xScale (d) + 10}\r\n                    y2={xAxisGrid ? 20 : y + TICKSIZE}\r\n                  />\r\n                );\r\n              })\r\n            : null}\r\n          {hideXAxisLabels\r\n            ? null\r\n            : _.map (bottomAxisData, function (d, i) {\r\n                return (\r\n                  <Text\r\n                    key={i}\r\n                    fill={axisLabelColor}\r\n                    fontSize={chartFontSize}\r\n                    textAnchor=\"middle\"\r\n                    x={inclindTick ? xScale (d) - 2 : xScale (d) + 10}\r\n                    y={chartHeight + 10}\r\n                  >\r\n                    {bottomAxisDataToShow[i]}\r\n                  </Text>\r\n                );\r\n              })}\r\n        </G>;\r\n\r\n    let xx = 0, yy = chartHeight;\r\n    let endXX = xx;\r\n    let endYY = yy - chartWidth;\r\n    yCoordinate = hideAxis\r\n      ? null\r\n      : <G fill=\"none\">\r\n          {hideYAxis\r\n            ? null\r\n            : <Line\r\n                stroke={axisColor}\r\n                strokeWidth={axisLineWidth}\r\n                x1={xx + 40}\r\n                x2={endXX + 40}\r\n                y1={yy}\r\n                y2={endYY}\r\n              />}\r\n          {showTicks\r\n            ? _.map (leftAxisData, function (d, i) {\r\n                return (\r\n                  <Line\r\n                    key={i}\r\n                    stroke={tickColorYAxis}\r\n                    strokeWidth={tickWidthYAxis}\r\n                    x1={xx + 40}\r\n                    y1={yScale (d)}\r\n                    x2={yAxisGrid ? chartWidth - 10 : xx + 30}\r\n                    y2={inclindTick ? yScale (d) - 5 : yScale (d)}\r\n                  />\r\n                );\r\n              })\r\n            : null}\r\n          {hideYAxisLabels\r\n            ? null\r\n            : _.map (leftAxisData, function (d, i) {\r\n                return (\r\n                  <Text\r\n                    key={i}\r\n                    fill={axisLabelColor}\r\n                    fontSize={chartFontSize}\r\n                    textAnchor=\"middle\"\r\n                    x={inclindTick ? xx + 25 : xx + 20}\r\n                    y={inclindTick ? yScale (d) - 20 : yScale (d) - 8}\r\n                  >\r\n                    {leftAxisDataToShow[i]}\r\n                  </Text>\r\n                );\r\n              })}\r\n        </G>;\r\n    // M40,74.5679012345679L73,20L106,171.11111111111111L139,87.16049382716051L139,360L370,183.70370370370372\r\n\r\n    var lineGen = d3\r\n      .line ()\r\n      .x (function (d) {\r\n        return xScale (d.x) + 10;\r\n      })\r\n      .y (function (d) {\r\n        return yScale (d.y);\r\n      });\r\n\r\n    let linePointsData = formatLineData (data);\r\n    linePathOne = scatterPlotEnable\r\n      ? null\r\n      : animation\r\n          ? _.map (linePointsData, (data, i) => {\r\n              this.lineAnimated[i] = createLineProps (data);\r\n              return (\r\n                <NativePath\r\n                  {...this.lineAnimated[i]}\r\n                  strokeOpacity={lineStrokeOpacity}\r\n                  key={i}\r\n                  fill={'none'}\r\n                  stroke={Color[i] ? Color[i] : '#000'}\r\n                  strokeWidth={lineWidth}\r\n                />\r\n              );\r\n            })\r\n          : _.map (linePointsData, (data, i) => {\r\n              return (\r\n                <Path\r\n                  strokeOpacity={lineStrokeOpacity}\r\n                  strokeDasharray={showDashedLine ? lineStrokeDashArray[i] : ''}\r\n                  key={i}\r\n                  d={data}\r\n                  fill={fillArea ? (Color[i] ? Color[i] : '#000') : 'none'}\r\n                  stroke={Color[i] ? Color[i] : '#000'}\r\n                  strokeWidth={lineWidth}\r\n                />\r\n              );\r\n            });\r\n    let dataPointsColor = buildColorArray (data, Color);\r\n\r\n    let pointData = calculateOverallLineChartData (data);\r\n    this.AnimatedPoints = new Array (pointData.length);\r\n    // console.log ('the anim points are', this.AnimatedPoints[0]);\r\n    circleInFirstLine = dataPointsVisible\r\n      ? _.map (pointData, (d, i) => {\r\n          let text;\r\n          this.AnimatedPoints[i] = createCircleProps (d, dataPointsColor[i]);\r\n          text = (\r\n            <Text\r\n              fontSize={chartFontSize}\r\n              x={xScale (d.x) + 10}\r\n              y={yScale (d.y) + 5}\r\n            >\r\n              {pointDataToShowOnGraph == 'Y'\r\n                ? d.y\r\n                : pointDataToShowOnGraph == 'X' ? d.x : ''}\r\n            </Text>\r\n          );\r\n          console.log ('the anim points are', this.AnimatedPoints[i]);\r\n          return (\r\n            <G key={i}>\r\n              {animation\r\n                ? <NativeCircle\r\n                    key={'circle_' + i}\r\n                    {...this.AnimatedPoints[i]}\r\n                  />\r\n                : <Circle\r\n                    key={'circle_' + i}\r\n                    strokeWidth={circleRadiusWidth}\r\n                    stroke={dataPointsColor[i]}\r\n                    d={d.x}\r\n                    fill={'white'}\r\n                    cx={xScale (d.x) + 10}\r\n                    cy={yScale (d.y)}\r\n                    r={circleRadius}\r\n                  />}\r\n              {text}\r\n            </G>\r\n          );\r\n        })\r\n      : null;\r\n\r\n    legend = showLegends\r\n      ? createLegend (\r\n          legendColor,\r\n          legendText,\r\n          chartWidth,\r\n          MARGINS,\r\n          legendStyle,\r\n          circleLegendType\r\n        )\r\n      : null;\r\n\r\n    function formatLineData (data) {\r\n      let linePointsData = [], lineDataArray = [];\r\n\r\n      for (let i = 0; i < data.length; i++) {\r\n        lineDataArray.push (data[i]);\r\n      }\r\n      for (var i = 0; i < lineDataArray.length; i++) {\r\n        linePointsData.push (lineGen (lineDataArray[i]));\r\n      }\r\n\r\n      return linePointsData;\r\n    }\r\n    function createCircleProps (d, strokeColor) {\r\n      return {\r\n        r: new Animated.Value (0),\r\n        cx: xScale (d.x) + 10,\r\n        cy: yScale (d.y),\r\n        stroke: strokeColor,\r\n        strokeWidth: circleRadiusWidth,\r\n        fill: 'white',\r\n      };\r\n    }\r\n    if (animation) this.animate ();\r\n  }\r\n\r\n  render () {\r\n    this.treeManipulation ();\r\n    const {GraphWidth, GraphHeight} = this.props;\r\n    return (\r\n      <Svg width={GraphWidth} height={GraphHeight}>\r\n        <G>\r\n          {yCoordinate}\r\n          {xCoordinate}\r\n          {linePathOne}\r\n          {circleInFirstLine}\r\n          {legend}\r\n        </G>\r\n      </Svg>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}