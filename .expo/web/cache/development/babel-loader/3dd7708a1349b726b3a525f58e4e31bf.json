{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nvar DEG_TO_RAD = Math.PI / 180;\n\nvar Matrix2D = function Matrix2D(_a, _b, _c, _d, _tx, _ty) {\n  _classCallCheck(this, Matrix2D);\n\n  this.setTransform = function (a, b, c, d, tx, ty) {\n    this.a = a == null ? 1 : a;\n    this.b = b || 0;\n    this.c = c || 0;\n    this.d = b == null ? 1 : d;\n    this.tx = tx || 0;\n    this.ty = ty || 0;\n    return this;\n  };\n\n  this.reset = function () {\n    this.a = this.d = 1;\n    this.b = this.c = this.tx = this.ty = 0;\n    return this;\n  };\n\n  this.toArray = function () {\n    return [this.a, this.b, this.c, this.d, this.tx, this.ty];\n  };\n\n  this.copy = function (matrix) {\n    return this.setTransform(matrix.a, matrix.b, matrix.c, matrix.d, matrix.tx, matrix.ty);\n  };\n\n  this.clone = function () {\n    return new Matrix2D(this.a, this.b, this.c, this.d, this.tx, this.ty);\n  };\n\n  this.prepend = function (a, b, c, d, tx, ty) {\n    var a1 = this.a;\n    var c1 = this.c;\n    var tx1 = this.tx;\n    this.a = a * a1 + c * this.b;\n    this.b = b * a1 + d * this.b;\n    this.c = a * c1 + c * this.d;\n    this.d = b * c1 + d * this.d;\n    this.tx = a * tx1 + c * this.ty + tx;\n    this.ty = b * tx1 + d * this.ty + ty;\n    return this;\n  };\n\n  this.append = function (a, b, c, d, tx, ty) {\n    var a1 = this.a;\n    var b1 = this.b;\n    var c1 = this.c;\n    var d1 = this.d;\n\n    if (a !== 1 || b !== 0 || c !== 0 || d !== 1) {\n      this.a = a1 * a + c1 * b;\n      this.b = b1 * a + d1 * b;\n      this.c = a1 * c + c1 * d;\n      this.d = b1 * c + d1 * d;\n    }\n\n    this.tx = a1 * tx + c1 * ty + this.tx;\n    this.ty = b1 * tx + d1 * ty + this.ty;\n    return this;\n  };\n\n  this.appendTransform = function (x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {\n    if (rotation % 360) {\n      var r = rotation * DEG_TO_RAD;\n      var cos = Math.cos(r);\n      var sin = Math.sin(r);\n    } else {\n      cos = 1;\n      sin = 0;\n    }\n\n    if (skewX || skewY) {\n      skewX *= DEG_TO_RAD;\n      skewY *= DEG_TO_RAD;\n      this.append(Math.cos(skewY), Math.sin(skewY), -Math.sin(skewX), Math.cos(skewX), x, y);\n      this.append(cos * scaleX, sin * scaleX, -sin * scaleY, cos * scaleY, 0, 0);\n    } else {\n      this.append(cos * scaleX, sin * scaleX, -sin * scaleY, cos * scaleY, x, y);\n    }\n\n    if (regX || regY) {\n      this.tx -= regX * this.a + regY * this.c;\n      this.ty -= regX * this.b + regY * this.d;\n    }\n\n    return this;\n  };\n\n  this.prependTransform = function (x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {\n    if (rotation % 360) {\n      var r = rotation * DEG_TO_RAD;\n      var cos = Math.cos(r);\n      var sin = Math.sin(r);\n    } else {\n      cos = 1;\n      sin = 0;\n    }\n\n    if (regX || regY) {\n      this.tx -= regX;\n      this.ty -= regY;\n    }\n\n    if (skewX || skewY) {\n      skewX *= DEG_TO_RAD;\n      skewY *= DEG_TO_RAD;\n      this.prepend(cos * scaleX, sin * scaleX, -sin * scaleY, cos * scaleY, 0, 0);\n      this.prepend(Math.cos(skewY), Math.sin(skewY), -Math.sin(skewX), Math.cos(skewX), x, y);\n    } else {\n      this.prepend(cos * scaleX, sin * scaleX, -sin * scaleY, cos * scaleY, x, y);\n    }\n\n    return this;\n  };\n\n  this.setTransform(_a, _b, _c, _d, _tx, _ty);\n};\n\nexport { Matrix2D as default };","map":{"version":3,"sources":["C:/Users/winston/Documents/react-native-boilerplate-master/node_modules/react-native-d3multiline-chart/utils/Matrix2D/index.js"],"names":["DEG_TO_RAD","Math","PI","Matrix2D","a","b","c","d","tx","ty","setTransform","reset","toArray","copy","matrix","clone","prepend","a1","c1","tx1","append","b1","d1","appendTransform","x","y","scaleX","scaleY","rotation","skewX","skewY","regX","regY","r","cos","sin","prependTransform"],"mappings":"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","sourcesContent":["/**\r\n * based on\r\n * https://github.com/CreateJS/EaselJS/blob/631cdffb85eff9413dab43b4676f059b4232d291/src/easeljs/geom/Matrix2D.js\r\n */\r\nconst DEG_TO_RAD = Math.PI / 180;\r\n\r\n/**\r\n * Represents an affine transformation matrix, and provides tools for constructing and concatenating matrices.\r\n *\r\n * This matrix can be visualized as:\r\n *\r\n * \t[ a  c  tx\r\n * \t  b  d  ty\r\n * \t  0  0  1  ]\r\n *\r\n * Note the locations of b and c.\r\n *\r\n * @class Matrix2D\r\n * @param {Number} [a=1] Specifies the a property for the new matrix.\r\n * @param {Number} [b=0] Specifies the b property for the new matrix.\r\n * @param {Number} [c=0] Specifies the c property for the new matrix.\r\n * @param {Number} [d=1] Specifies the d property for the new matrix.\r\n * @param {Number} [tx=0] Specifies the tx property for the new matrix.\r\n * @param {Number} [ty=0] Specifies the ty property for the new matrix.\r\n * @constructor\r\n **/\r\nexport default class Matrix2D {\r\n  constructor(a, b, c, d, tx, ty) {\r\n    this.setTransform(a, b, c, d, tx, ty);\r\n\r\n    // public properties:\r\n    // assigned in the setValues method.\r\n    /**\r\n     * Position (0, 0) in a 3x3 affine transformation matrix.\r\n     * @property a\r\n     * @type Number\r\n     **/\r\n\r\n    /**\r\n     * Position (0, 1) in a 3x3 affine transformation matrix.\r\n     * @property b\r\n     * @type Number\r\n     **/\r\n\r\n    /**\r\n     * Position (1, 0) in a 3x3 affine transformation matrix.\r\n     * @property c\r\n     * @type Number\r\n     **/\r\n\r\n    /**\r\n     * Position (1, 1) in a 3x3 affine transformation matrix.\r\n     * @property d\r\n     * @type Number\r\n     **/\r\n\r\n    /**\r\n     * Position (2, 0) in a 3x3 affine transformation matrix.\r\n     * @property tx\r\n     * @type Number\r\n     **/\r\n\r\n    /**\r\n     * Position (2, 1) in a 3x3 affine transformation matrix.\r\n     * @property ty\r\n     * @type Number\r\n     **/\r\n  }\r\n\r\n  /**\r\n   * Set current matrix to new absolute matrix.\r\n   * @method setTransform\r\n   * @param {Number} [a=1] Specifies the a property for the new matrix.\r\n   * @param {Number} [b=0] Specifies the b property for the new matrix.\r\n   * @param {Number} [c=0] Specifies the c property for the new matrix.\r\n   * @param {Number} [d=1] Specifies the d property for the new matrix.\r\n   * @param {Number} [tx=0] Specifies the tx property for the new matrix.\r\n   * @param {Number} [ty=0] Specifies the ty property for the new matrix.\r\n   * @return {Matrix2D} This instance. Useful for chaining method calls.\r\n   */\r\n  setTransform = function(a, b, c, d, tx, ty) {\r\n    /*eslint eqeqeq:0*/\r\n    this.a = a == null ? 1 : a;\r\n    this.b = b || 0;\r\n    this.c = c || 0;\r\n    this.d = b == null ? 1 : d;\r\n    this.tx = tx || 0;\r\n    this.ty = ty || 0;\r\n    return this;\r\n  };\r\n\r\n  /**\r\n   * Reset current matrix to an identity matrix.\r\n   * @method reset\r\n   * @return {Matrix2D} This matrix. Useful for chaining method calls.\r\n   **/\r\n  reset = function() {\r\n    this.a = this.d = 1;\r\n    this.b = this.c = this.tx = this.ty = 0;\r\n    return this;\r\n  };\r\n\r\n  /**\r\n   * Returns an array with current matrix values.\r\n   * @method toArray\r\n   * @return {Array} an array with current matrix values.\r\n   **/\r\n  toArray = function() {\r\n    return [this.a, this.b, this.c, this.d, this.tx, this.ty];\r\n  };\r\n\r\n  /**\r\n   * Copies all properties from the specified matrix to this matrix.\r\n   * @method copy\r\n   * @param {Matrix2D} matrix The matrix to copy properties from.\r\n   * @return {Matrix2D} This matrix. Useful for chaining method calls.\r\n   */\r\n  copy = function(matrix) {\r\n    return this.setTransform(matrix.a, matrix.b, matrix.c, matrix.d, matrix.tx, matrix.ty);\r\n  };\r\n\r\n  /**\r\n   * Clones current instance and returning a new matrix.\r\n   * @method clone\r\n   * @return {Matrix2D} a clone of the Matrix2D instance.\r\n   **/\r\n  clone = function() {\r\n    return new Matrix2D(this.a, this.b, this.c, this.d, this.tx, this.ty);\r\n  };\r\n\r\n  /**\r\n   * Prepends the specified matrix properties to this matrix.\r\n   * This is the equivalent of multiplying `(specified matrix) * (this matrix)`.\r\n   * All parameters are required.\r\n   * @method prepend\r\n   * @param {Number} a\r\n   * @param {Number} b\r\n   * @param {Number} c\r\n   * @param {Number} d\r\n   * @param {Number} tx\r\n   * @param {Number} ty\r\n   * @return {Matrix2D} This matrix. Useful for chaining method calls.\r\n   **/\r\n  prepend = function(a, b, c, d, tx, ty) {\r\n    var a1 = this.a;\r\n    var c1 = this.c;\r\n    var tx1 = this.tx;\r\n\r\n    this.a  = a * a1 + c * this.b;\r\n    this.b  = b * a1 + d * this.b;\r\n    this.c  = a * c1 + c * this.d;\r\n    this.d  = b * c1 + d * this.d;\r\n    this.tx = a * tx1 + c * this.ty + tx;\r\n    this.ty = b * tx1 + d * this.ty + ty;\r\n    return this;\r\n  };\r\n\r\n  /**\r\n   * Appends the specified matrix properties to this matrix. All parameters are required.\r\n   * This is the equivalent of multiplying `(this matrix) * (specified matrix)`.\r\n   * @method append\r\n   * @param {Number} a\r\n   * @param {Number} b\r\n   * @param {Number} c\r\n   * @param {Number} d\r\n   * @param {Number} tx\r\n   * @param {Number} ty\r\n   * @return {Matrix2D} This matrix. Useful for chaining method calls.\r\n   **/\r\n  append = function(a, b, c, d, tx, ty) {\r\n    var a1 = this.a;\r\n    var b1 = this.b;\r\n    var c1 = this.c;\r\n    var d1 = this.d;\r\n    if (a !== 1 || b !== 0 || c !== 0 || d !== 1) {\r\n      this.a  = a1 * a + c1 * b;\r\n      this.b  = b1 * a + d1 * b;\r\n      this.c  = a1 * c + c1 * d;\r\n      this.d  = b1 * c + d1 * d;\r\n    }\r\n    this.tx = a1 * tx + c1 * ty + this.tx;\r\n    this.ty = b1 * tx + d1 * ty + this.ty;\r\n    return this;\r\n  };\r\n\r\n  /**\r\n   * Generates matrix properties from the specified display object transform properties, and appends them to this matrix.\r\n   * For example, you can use this to generate a matrix representing the transformations of a display object:\r\n   *\r\n   * \tvar mtx = new createjs.Matrix2D();\r\n   * \tmtx.appendTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation);\r\n   * @method appendTransform\r\n   * @param {Number} x\r\n   * @param {Number} y\r\n   * @param {Number} scaleX\r\n   * @param {Number} scaleY\r\n   * @param {Number} rotation\r\n   * @param {Number} skewX\r\n   * @param {Number} skewY\r\n   * @param {Number} regX Optional.\r\n   * @param {Number} regY Optional.\r\n   * @return {Matrix2D} This matrix. Useful for chaining method calls.\r\n   **/\r\n  appendTransform = function(x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {\r\n    if (rotation % 360) {\r\n      var r = rotation * DEG_TO_RAD;\r\n      var cos = Math.cos(r);\r\n      var sin = Math.sin(r);\r\n    } else {\r\n      cos = 1;\r\n      sin = 0;\r\n    }\r\n\r\n    if (skewX || skewY) {\r\n      // TODO: can this be combined into a single append operation?\r\n      skewX *= DEG_TO_RAD;\r\n      skewY *= DEG_TO_RAD;\r\n      this.append(Math.cos(skewY), Math.sin(skewY), -Math.sin(skewX), Math.cos(skewX), x, y);\r\n      this.append(cos * scaleX, sin * scaleX, -sin * scaleY, cos * scaleY, 0, 0);\r\n    } else {\r\n      this.append(cos * scaleX, sin * scaleX, -sin * scaleY, cos * scaleY, x, y);\r\n    }\r\n\r\n    if (regX || regY) {\r\n      // append the registration offset:\r\n      this.tx -= regX * this.a + regY * this.c;\r\n      this.ty -= regX * this.b + regY * this.d;\r\n    }\r\n    return this;\r\n  };\r\n\r\n  /**\r\n   * Generates matrix properties from the specified display object transform properties, and prepends them to this matrix.\r\n   * For example, you could calculate the combined transformation for a child object using:\r\n   *\r\n   * \tvar o = myDisplayObject;\r\n   * \tvar mtx = new createjs.Matrix2D();\r\n   * \tdo  {\r\n   * \t\t// prepend each parent's transformation in turn:\r\n   * \t\tmtx.prependTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation, o.skewX, o.skewY, o.regX, o.regY);\r\n   * \t} while (o = o.parent);\r\n   *\r\n   * \tNote that the above example would not account for {{#crossLink \"DisplayObject/transformMatrix:property\"}}{{/crossLink}}\r\n   * \tvalues. See {{#crossLink \"Matrix2D/prependMatrix\"}}{{/crossLink}} for an example that does.\r\n   * @method prependTransform\r\n   * @param {Number} x\r\n   * @param {Number} y\r\n   * @param {Number} scaleX\r\n   * @param {Number} scaleY\r\n   * @param {Number} rotation\r\n   * @param {Number} skewX\r\n   * @param {Number} skewY\r\n   * @param {Number} regX Optional.\r\n   * @param {Number} regY Optional.\r\n   * @return {Matrix2D} This matrix. Useful for chaining method calls.\r\n   **/\r\n  prependTransform = function(x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {\r\n    if (rotation % 360) {\r\n        var r = rotation * DEG_TO_RAD;\r\n        var cos = Math.cos(r);\r\n        var sin = Math.sin(r);\r\n    } else {\r\n        cos = 1;\r\n        sin = 0;\r\n    }\r\n\r\n    if (regX || regY) {\r\n        // prepend the registration offset:\r\n        this.tx -= regX; this.ty -= regY;\r\n    }\r\n    if (skewX || skewY) {\r\n        // TODO: can this be combined into a single prepend operation?\r\n        skewX *= DEG_TO_RAD;\r\n        skewY *= DEG_TO_RAD;\r\n        this.prepend(cos * scaleX, sin * scaleX, -sin * scaleY, cos * scaleY, 0, 0);\r\n        this.prepend(Math.cos(skewY), Math.sin(skewY), -Math.sin(skewX), Math.cos(skewX), x, y);\r\n    } else {\r\n        this.prepend(cos * scaleX, sin * scaleX, -sin * scaleY, cos * scaleY, x, y);\r\n    }\r\n    return this;\r\n  };\r\n}"]},"metadata":{},"sourceType":"module"}